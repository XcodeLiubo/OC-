{\rtf1\ansi\ansicpg936\cocoartf1671\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red228\green124\blue72;\red18\green18\blue18;\red128\green128\blue128;
\red255\green44\blue56;\red128\green255\blue8;\red127\green127\blue127;\red120\green109\blue255;}
{\*\expandedcolortbl;;\csgenericrgb\c89600\c48800\c28400;\csgenericrgb\c7070\c7070\c7070;\csgenericrgb\c50196\c50196\c50196;
\csgenericrgb\c100000\c17100\c21900;\csgenericrgb\c50196\c99996\c3104\c72951;\csgenericrgb\c49804\c49804\c49804;\csgenericrgb\c46900\c42600\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww27320\viewh13580\viewkind0
\deftab890
\pard\tx890\pardeftab890\pardirnatural\partightenfactor0

\f0\fs36 \cf2 \cb3 #define getTypeStr(_V) \{\\\cf4 \
\cf2 NSString* str = @(@encode(__typeof(_V)));\\\cf4 \
\cf2 if([str hasSuffix:@\cf5 "c]"\cf2 ])\{\\\cf4 \
\cf2 str = @\cf5 "s"\cf2 ;\\\cf4 \
\cf2 \}else if([str isEqualToString:@\cf5 "i]"\cf2 ])\{\\\cf4 \
\cf2 str = @\cf5 "C"\cf2 ;\\\cf4 \
\cf2 \}\\\cf4 \
\cf2 NSLog([@\cf5 "%"\cf2  stringByAppendingString:str],_V);\\\cf4 \
\cf2 \}\cf4 \
\
\cf6 //! ?strcmp(@encode(__typeof(_V)),"i") == 0?@"%c":[@"%" stringByAppendingString:@(@encode(__typeof(_V)))]:\\\cf4 \
\cf7 //@"%s"\}\cf4 \
\
\cf2 #define LogMaxArg \cf8 10\cf4 \
\cf2 #define LogArgList0 \cf8 10\cf2 ,\cf8 9\cf2 ,\cf8 8\cf2 ,\cf8 7\cf2 ,\cf8 6\cf2 ,\cf8 5\cf2 ,\cf8 4\cf2 ,\cf8 3\cf2 ,\cf8 2\cf2 ,\cf8 1\cf4 \
\
\cf2 #define Log(...) Log_args(LogMaxArg,__VA_ARGS__,LogArgList0)(__VA_ARGS__)\cf4 \
\cf2 #define Log_args(N,...) Log_Find_index(__VA_ARGS__,LogArgList0)\cf4 \
\cf2 #define Log_Find_index(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,...) LogFun(Log_,__VA_ARGS__)\cf4 \
\cf2 #define LogFun(Fun,F,...) Fun##F\cf4 \
\
\cf2 #define Log_1(_V)                   getTypeStr(_V);\cf4 \
\
\cf2 #define Log_2(_V,...)               getTypeStr(_V);Log_1(__VA_ARGS__)\cf4 \
\
\cf2 #define Log_3(_V,...)               getTypeStr(_V);Log_2(__VA_ARGS__)\cf4 \
\
\cf2 #define Log_4(_V,...)               getTypeStr(_V);Log_3(__VA_ARGS__)\cf4 \
\
\cf2 #define Log_5(_V,...)               getTypeStr(_V);Log_4(__VA_ARGS__)\cf4 \
\
\cf2 #define Log_6(_V,...)               getTypeStr(_V);Log_5(__VA_ARGS__)\cf4 \
\
\cf2 #define Log_7(_V,...)               getTypeStr(_V);Log_6(__VA_ARGS__)\cf4 \
\
\cf2 #define Log_8(_V,...)               getTypeStr(_V);Log_7(__VA_ARGS__)\cf4 \
\
\cf2 #define Log_9(_V,...)               getTypeStr(_V);Log_8(__VA_ARGS__)\cf4 \
\
\cf2 #define Log_10(_V,...)              getTypeStr(_V);Log_9(__VA_ARGS__)}